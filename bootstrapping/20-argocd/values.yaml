configs:
  cm:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
    url: "http://argocd.hacksm.net"
    dex.config: |
      connectors:
        - type: oidc
          name: authentik
          id: authentik
          config:
            issuer: http://authentik.hacksm.net/application/o/argocd/
            clientID: argocd
            clientSecret: $sso:token
            insecureEnableGroups: true
            scopes:
              - openid
              - profile
              - email
  rbac:
    policy.default: role:readonly
    policy.csv: |
      g, ArgoCD Admin, role:admin
  params:
    server.insecure: "true"

repoServer:
  # Until KSOPS setup logic is re-written, this can only run
  # on amd64 nodes.
  nodeSelector:
    kubernetes.io/arch: amd64
  deploymentAnnotations:
    reloader.stakater.com/auto: "true"
  rbac:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "watch", "list"]
  volumes:
    - name: cmp-plugin
      configMap:
        name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
  initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: 1.16.0
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  extraContainers:
    - name: plugin-avp-directory-include
      command: [/var/run/argocd/argocd-cmp-server]
      image: "{{ default .Values.global.image.repository .Values.server.image.repository }}:{{ default (include \"argo-cd.defaultTag\" .) .Values.server.image.tag }}"
      env:
      - name: AVP_TYPE
        value: kubernetessecret
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: avp-directory-include.yaml
          name: cmp-plugin
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
extraObjects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: cmp-plugin
      namespace: "{{ .Release.Namespace }}"
    data:
      avp-directory-include.yaml: |
        apiVersion: argoproj.io/v1alpha1
        kind: ConfigManagementPlugin
        metadata:
          name: avp-directory-include
        spec:
          allowConcurrency: true
          generate:
            command:
              - bash
              - "-c"
              - |
                argocd-vault-plugin generate $ARGOCD_ENV_FILE_NAME
          lockRepo: false
server:
  config:
    application.instanceLabelKey: argocd.argoproj.io/instance
    url: https://argocd.hacksm.net
    # Why in the FUCK is this here? See below!
    # https://argo-cd.readthedocs.io/en/release-2.4/faq/#why-is-my-application-still-outofsync-immediately-after-a-successful-sync
    # https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml#L235
    # Thanks a ton to @onedr0p, @toboshii, and @xUnholy for the help in figuring this out!
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-production
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: 'true'
    tls:
    - secretName: argocd-cert
      hosts:
      - argocd.hacksm.net
    rules:
    - host: argocd.hacksm.net
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: argo-argocd-server
              port:
                name: 80
# dex:
#   env:
#   - name: ARGO_WORKFLOWS_SSO_CLIENT_ID
#     valueFrom:
#       secretKeyRef:
#         name: argo-workflows-sso
#         key: client-id
#   - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
#     valueFrom:
#       secretKeyRef:
#         name: argo-workflows-sso
#         key: client-secret