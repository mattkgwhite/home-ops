apiVersion: v1
kind: Namespace
metadata:
  name: argo-workflows
---
apiVersion: v1
kind: Namespace
metadata:
  name: workflows
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: sso
  namespace: argo-workflows
  labels:
    app.kubernetes.io/part-of: argocd
spec:
  refreshInterval: "5m"
  secretStoreRef:
    kind: ClusterSecretStore
    name: 1password
  target:
    creationPolicy: Owner
  data:
    - secretKey: token
      remoteRef:
        key: sso
        property: workflows
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: workflows-cert
spec:
  commonName: workflows.<path:stringreplacesecret#domain>
  secretName: workflows-cert
  dnsNames:
    - workflows.<path:stringreplacesecret#domain>
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
---
apiVersion: v1
kind: Service
metadata:
  name: workflows-extname
  annotations:
    external-dns.alpha.kubernetes.io/hostname: workflows.<path:stringreplacesecret#domain>
    external-dns.alpha.kubernetes.io/ttl: "300"
spec:
  type: ExternalName
  externalName: nginx.<path:stringreplacesecret#domain>
  sessionAffinity: None
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argo-workflows
  namespace: argocd
spec:
  destination:
    namespace: argo-workflows
    server: https://kubernetes.default.svc
  project: homelab
  source:
    chart: argo-workflows
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 0.33.1
    helm:
      values: |
        fullnameOverride: argo-workflows
        crds:
          install: true
          keep: true
        workflow:
          rbac:
            create: true
          serviceAccount:
            create: true
        controller:
          workflowNamespaces:
            - default
            - workflows
        server:
          enabled: true
          ingress:
            enabled: false
          rbac:
            create: true
          serviceAccount: 
            annotations:
              workflows.argoproj.io/rbac-rule: "'hacksmhosting:admins' in groups"
              workflows.argoproj.io/rbac-rule-procedure: "1"
              workflows.argoproj.io/service-account-token.name: admin-user.service-account-token
          extraArgs:
          - --secure
          - --auth-mode=sso
          auth:
            mode: sso
            sso:
              enabled: true
              issuer: "https://authentik.<path:stringreplacesecret#domain>/application/o/workflows/"
              redirectUrl: "http://workflows.<path:stringreplacesecret#domain>/login/generic_oauth"
              userInfoPath: /application/o/userinfo/
              sessionExpiry: 240h
              scopes:
              - email
              userInfoGroupsField: memberof
              rbac:
                enabled: true
              clientId:
                name: workflows
              clientSecret: $sso:token
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argo-workflows
  namespace: argo-workflows
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - workflows.<path:stringreplacesecret#domain>
    secretName: workflows-cert
  rules:
  - host: workflows.<path:stringreplacesecret#domain>
    http:
      paths:
      - backend:
          service:
            name: argo-workflows-server
            port:
              number: 2746
        path: /
        pathType: Prefix
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hacksmhosting-admins
rules:
- verbs: [get, watch, list]
  apiGroups: [""]
  resources: [configmaps, events]
- verbs: [get, watch, list, delete]
  apiGroups: [""]
  resources: [pods]
- verbs: [get, list]
  apiGroups: [""]
  resources: [pods/log]
- verbs: [get, create]
  apiGroups: [""]
  resources: [secrets]
  resourceNames: [sso]
- verbs: [get, list, watch]
  apiGroups: [""]
  resources: [serviceaccounts]
- verbs: [create, watch, patch]
  apiGroups: [""]
  resources: [events]
- verbs: [create, get, list, watch, update, patch, delete]
  apiGroups: [argoproj.io]
  resources:
  - cronworkflows
  - eventbus
  - eventsources
  - sensors
  - workfloweventbindings
  - workflows
  - workflowtaskresults
  - workflowtasksets
  - workflowtemplates
  - clusterworkflowtemplates
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hacksmhosting-admins
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hacksmhosting-admins
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: argo-workflows
  annotations:
    workflows.argoproj.io/rbac-rule: "'hacksmhosting:admins' in groups"
    workflows.argoproj.io/rbac-rule-precedence: "1"
    workflows.argoproj.io/service-account-token.name: admin-user.service-account-token
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-user.service-account-token
  namespace: argo-workflows
  annotations:
    kubernetes.io/service-account.name: admin-user
type: kubernetes.io/service-account-token