apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: jenkins
  name: jenkins
# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: sso
#   namespace: jenkins
# spec:
#   refreshInterval: "5m"
#   secretStoreRef:
#     kind: ClusterSecretStore
#     name: 1password
#   target:
#     creationPolicy: Owner
#   data:
#     - secretKey: jenkins-admin-secret
#       remoteRef:
#         key: jenkins
#         property: admin-secret
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: jenkins
#   namespace: jenkins
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-production
#     kubernetes.io/ingress.class: nginx
#     kubernetes.io/tls-acme: 'true'
# spec:
#   ingressClassName: nginx
#   tls:
#   - hosts:
#     - jenkins.<path:stringreplacesecret#domain>
#     secretName: jenkins-cert
#   rules:
#   - host: jenkins.<path:stringreplacesecret#domain>
#     http:
#       paths:
#       - backend:
#           service:
#             name: jenkins
#             port:
#               number: 8080
#         path: /
#         pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-extname
  namespace: jenkins
  annotations:
    external-dns.alpha.kubernetes.io/hostname: jenkins.<path:stringreplacesecret#domain>
    external-dns.alpha.kubernetes.io/ttl: "300"
spec:
  type: ExternalName
  externalName: nginx.<path:stringreplacesecret#domain>
  sessionAffinity: None
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: knative-serving
  namespace: argocd
spec:
  destination:
    namespace: knative-serving
    server: https://kubernetes.default.svc
  project: homelab
  source:
    repoURL: https://github.com/mattkgwhite/empty.git
    path: .
    plugin:
      name: kustomize-inline
      env:
        - name: KUSTOMIZATION_YAML
          # $ must be escaped with by $$
          value: |
            global:
            nameOverride: jenkins
            image:
              repository: jenkins-container-image
              tag: latest
              pullPolicy: IfNotPresent
            podSecurityContext:
              fsGroup: 1000
              runAsUser: 1000
              runAsGroup: 1000
            termination:
              gracePeriodSeconds: 60
            resources:
              limits:
                cpu: "2"
                memory: "4Gi"
              requests:
                cpu: "1"
                memory: "2Gi"
            initContainers:
              init:
                image: busybox-image
                command: ["sh", "-c", "ls -halt /var/jenkins_home && chown -R 1000:1000 /var/jenkins_home"]
                securityContext:
                  runAsUser: 0
                  allowPrivilegeEscalation: true
                volumeMounts:
                - name: jenkins-home
                  mountPath: /var/jenkins_home
                  subPath: jenkins-volume
            service:
              main:
                enabled: true
                type: ClusterIP
                ports:
                  http:
                    enabled: false
                  web:
                    enabled: true
                    port: 8080
                    protocol: TCP
                  jnlp-agents:
                    enabled: true
                    port: 50000
                    protocol: TCP
            ingress:
              main:
                enabled: true
                ingressClassName: nginx
                tls:
                - secretName: jenkins-cert
                  hosts:
                  - jenkins.<path:stringreplacesecret#domain>
                hosts:
                - host: jenkins.<path:stringreplacesecret#domain>
                  paths:
                  - path: /
                    service:
                      name: jenkins
                      port: 8080
            apiVersion: v1
            kind: ServiceAccount
            # automountServiceAccountToken: true
            metadata:
              name: default
            apiVersion: v1
            kind: Secret
            type: kubernetes.io/service-account-token
            metadata:
              name: default.service-account-token
              annotations:
                kubernetes.io/service-account.name: default
            kind: ClusterRole
            apiVersion: rbac.authorization.k8s.io/v1
            metadata:
              name: jenkins
            rules:
            - apiGroups: [""]
              resources: ["services"]
              verbs: ["get", "watch", "list"]
            - apiGroups: [""]
              resources: ["pods"]
              verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: jenkins-user
            roleRef:
              name: jenkins
              kind: ClusterRole
              apiGroup: rbac.authorization.k8s.io
            subjects:
            - name: default
              kind: ServiceAccount
              namespace: default
            persistence:
              jenkins-home:
                enabled: true
                storageClass: hcloud-volume
                accessMode: ReadWriteOnce
                mountPath: /var/jenkins_home
                size: 20Gi
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true